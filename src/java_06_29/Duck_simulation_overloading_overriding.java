package java_06_29;

/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
- D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
- D3 요구 : 오리 계열의 클래스에 날다 메서드가 중복되었습니다. 중복을 제거해주세요.
- D4 요구 : 게임의 재미를 위하여 고무오리를 추가하고 날게 하시오.
- D5 요구 : 주말 주주회의에서 고무오리가 하늘을 날아다니는 것에 대해서 태클이 들어왔습니다. 고무오리 계열은 하늘을 날 수 없게 해주세요.
- D6 요구 : 고무오리가 반응이 좋습니다. 고무2오리를 추가하고 날게 해주세요.
- D7 요구 : 고무오리계열에서 날다 메서드의 중복을 제거해주세요.
- D8 요구 : 자바에서 다중상속은 불가능 합니다. 상속에는 한계가 있습니다. 상속을 사용하지 않고 고무오리계열의 중복을 제거해주세요.
*/

class Duck_simulation_overloading_overriding {
	public static void main(String[] args) {
		System.out.println("== 청둥오리 ==");
		청둥오리 a청둥오리 = new 청둥오리();
		a청둥오리.날다(); // 오리가 날개로 날아갑니다.
		a청둥오리.수영하다(); // 오리가 물갈퀴로 수영합니다.

		System.out.println("== 흰오리 ==");
		흰오리 a흰오리 = new 흰오리();
		a흰오리.날다(); // 오리가 날개로 날아갑니다.
		a흰오리.수영하다(); // 오리가 물갈퀴로 수영합니다.

		System.out.println("== 고무오리 ==");
		고무오리 a고무오리 = new 고무오리();
		a고무오리.날다(); // 저는 못 날아요 ㅠㅠ
		a고무오리.수영하다(); // 오리가 물에 둥둥 떠다닙니다.

		System.out.println("== 고무2오리 ==");
		고무2오리 a고무2오리 = new 고무2오리();
		a고무2오리.날다(); // 저는 못 날아요 ㅠㅠ
		a고무2오리.수영하다(); // 오리가 물에 둥둥 떠다닙니다.

		System.out.println("== 로봇오리 ==");
		로봇오리 a로봇오리 = new 로봇오리();
		a로봇오리.날다(); // 오리가 날개로 날아갑니다.
		a로봇오리.수영하다(); // 오리가 물에 둥둥 떠다닙니다.
	}
}

// D1
class 오리 {
	void 날다() {
		System.out.println("오리가 날개로 날아갑니다.");
	}

	void 수영하다() {
		System.out.println("오리가 물갈퀴로 수영합니다.");
	}
}

// D2, D3(오버로드 상속추가)
class 청둥오리 extends 오리 {

}

// D2, D3(오버로드 상속추가)
class 흰오리 extends 오리 {

}

// D4, D5(오버라이드 재정의)
class 고무오리 extends 로봇오리{
	void 날다() {
		System.out.println("저는 날 수 없어요ㅠㅠ");
	}
}

// D6, D7(오버로드 상속추가)
class 고무2오리 extends 고무오리 {

}

// D8(중복제거를 위한 상속 재설정), [오리 > 고무오리 > 로봇오리] => [오리 > 로봇오리 > 고무오리]
class 로봇오리 extends 오리 {
	void 수영하다() {
		System.out.println("오리가 물에 둥둥 떠다닙니다.");
	}
}